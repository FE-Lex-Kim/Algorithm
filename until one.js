// 문제 유형 : 그리디
// 어떠한 수 N이 1이 될 때까지  두 과정중 하나를 반복적으로 수행한다.
// 단 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있다.

// 1. N에서 1을 빼준다.
// 2. N을 K로 나누어준다.

// 예를 들어 N이 17, K가 4라고 가정하면, 이때 1번의 과정을 한 번 수행하면 N은 16이 된다.
// 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다. 결과적으로 실행 횟수는 3이다.

// N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성해라

// 입력 조건 N(1 <= N <= 100000) K(2 <= N <= 100000) 자연수
// 출력 조건 N이 1이 될때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최소값을 출력.

const test = (N, K) => {
  let count = 0;
  // N을 K로 나눌 수 있다면
  while (N > 1) {
    if (N % K === 0) {
      N = N / K;
    } else {
      // 나눌 수 없다면 1을 빼준다.
      N = N - 1;
    }
    count++;
  }
  console.log(count);
};

test(18, 4);
